import { describe, expect, it } from 'vitest';
import { handleChunk } from './helpers';

describe('Testing handleChunk function', async () => {
  // Mock valid and invalid mock data
  const validMockInputData = Buffer.from([
    0x47, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47,
    0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]);

  const invalidMockInputData = Buffer.from([
    0x46, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47,
    0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ]);
  it('should handle errors', () => {
    const packetIndex = 0;
    const pids = [0x1122];

    const proccessedChunked = handleChunk(invalidMockInputData, pids, packetIndex);

    expect(pids).toEqual([0x1122]); //remain unchanged
  });
});
